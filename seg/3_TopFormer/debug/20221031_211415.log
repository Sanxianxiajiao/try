2022-10-31 21:14:19,219 - mmseg - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.7.13 (default, Oct 18 2022, 18:57:03) [GCC 11.2.0]
CUDA available: True
GPU 0: Tesla V100-SXM3-32GB
CUDA_HOME: None
GCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
PyTorch: 1.10.0
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX512
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.2
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.11.0
OpenCV: 4.6.0
MMCV: 1.4.0
MMCV Compiler: GCC 7.3
MMCV CUDA Compiler: 11.3
MMSegmentation: 0.19.0+cc0f436
------------------------------------------------------------

2022-10-31 21:14:19,221 - mmseg - INFO - Distributed training: False
2022-10-31 21:14:26,943 - mmseg - INFO - Config:
norm_cfg = dict(type='SyncBN', requires_grad=True)
model_cfgs = dict(
    cfg=[[3, 1, 16, 1], [3, 4, 32, 2], [3, 3, 32, 1], [5, 3, 64, 2],
         [5, 3, 64, 1], [3, 3, 128, 2], [3, 3, 128, 1], [5, 6, 160, 2],
         [5, 6, 160, 1], [3, 6, 160, 1]],
    channels=[32, 64, 128, 160],
    out_channels=[None, 256, 256, 256],
    embed_out_indice=[2, 4, 6, 9],
    decode_out_indices=[1, 2, 3],
    c2t_stride=2,
    key_dim=[16, 16, 16, 16],
    num_heads=[8, 8, 8, 8],
    attn_ratios=[2.0, 2.0, 2.0, 2.0],
    mlp_ratios=[2.0, 2.0, 2.0, 2.0])
model = dict(
    type='EncoderDecoder',
    backbone=dict(
        type='Topformer',
        cfgs=[[3, 1, 16, 1], [3, 4, 32, 2], [3, 3, 32, 1], [5, 3, 64, 2],
              [5, 3, 64, 1], [3, 3, 128, 2], [3, 3, 128, 1], [5, 6, 160, 2],
              [5, 6, 160, 1], [3, 6, 160, 1]],
        channels=[32, 64, 128, 160],
        out_channels=[None, 256, 256, 256],
        embed_out_indice=[2, 4, 6, 9],
        decode_out_indices=[1, 2, 3],
        key_dim=[16, 16, 16, 16],
        attn_ratios=[2.0, 2.0, 2.0, 2.0],
        mlp_ratios=[2.0, 2.0, 2.0, 2.0],
        depths=[1, 1, 1, 1],
        num_heads=[8, 8, 8, 8],
        c2t_stride=2,
        drop_path_rate=0.1,
        norm_cfg=dict(type='SyncBN', requires_grad=True),
        init_cfg=dict(type='Pretrained', checkpoint=None)),
    decode_head=dict(
        type='SimpleHead',
        in_channels=[256, 256, 256],
        in_index=[0, 1, 2],
        channels=256,
        dropout_ratio=0.1,
        num_classes=150,
        norm_cfg=dict(type='SyncBN', requires_grad=True),
        align_corners=False,
        loss_decode=dict(
            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),
    train_cfg=dict(),
    test_cfg=dict(mode='whole'))
work_dir = 'debug'
gpu_ids = range(0, 1)

2022-10-31 21:14:26,944 - mmseg - INFO - Set random seed to 777016020, deterministic: False
2022-10-31 21:14:35,798 - mmseg - INFO - initialize SimpleHead with init_cfg {'type': 'Normal', 'std': 0.01, 'override': {'name': 'conv_seg'}}
Name of parameter - Initialization information

backbone.tpm.stem.0.c.weight - torch.Size([16, 3, 3, 3]): 
Initialized by user-defined `init_weights` in Topformer  

backbone.tpm.stem.0.bn.weight - torch.Size([16]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.tpm.stem.0.bn.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.tpm.layer1.conv.0.c.weight - torch.Size([16, 1, 3, 3]): 
Initialized by user-defined `init_weights` in Topformer  

backbone.tpm.layer1.conv.0.bn.weight - torch.Size([16]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.tpm.layer1.conv.0.bn.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.tpm.layer1.conv.2.c.weight - torch.Size([16, 16, 1, 1]): 
Initialized by user-defined `init_weights` in Topformer  

backbone.tpm.layer1.conv.2.bn.weight - torch.Size([16]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.tpm.layer1.conv.2.bn.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.tpm.layer2.conv.0.c.weight - torch.Size([64, 16, 1, 1]): 
Initialized by user-defined `init_weights` in Topformer  

backbone.tpm.layer2.conv.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.tpm.layer2.conv.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.tpm.layer2.conv.2.c.weight - torch.Size([64, 1, 3, 3]): 
Initialized by user-defined `init_weights` in Topformer  

backbone.tpm.layer2.conv.2.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.tpm.layer2.conv.2.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.tpm.layer2.conv.4.c.weight - torch.Size([32, 64, 1, 1]): 
Initialized by user-defined `init_weights` in Topformer  

backbone.tpm.layer2.conv.4.bn.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.tpm.layer2.conv.4.bn.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.tpm.layer3.conv.0.c.weight - torch.Size([96, 32, 1, 1]): 
Initialized by user-defined `init_weights` in Topformer  

backbone.tpm.layer3.conv.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.tpm.layer3.conv.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.tpm.layer3.conv.2.c.weight - torch.Size([96, 1, 3, 3]): 
Initialized by user-defined `init_weights` in Topformer  

backbone.tpm.layer3.conv.2.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.tpm.layer3.conv.2.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.tpm.layer3.conv.4.c.weight - torch.Size([32, 96, 1, 1]): 
Initialized by user-defined `init_weights` in Topformer  

backbone.tpm.layer3.conv.4.bn.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.tpm.layer3.conv.4.bn.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.tpm.layer4.conv.0.c.weight - torch.Size([96, 32, 1, 1]): 
Initialized by user-defined `init_weights` in Topformer  

backbone.tpm.layer4.conv.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.tpm.layer4.conv.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.tpm.layer4.conv.2.c.weight - torch.Size([96, 1, 5, 5]): 
Initialized by user-defined `init_weights` in Topformer  

backbone.tpm.layer4.conv.2.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.tpm.layer4.conv.2.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.tpm.layer4.conv.4.c.weight - torch.Size([64, 96, 1, 1]): 
Initialized by user-defined `init_weights` in Topformer  

backbone.tpm.layer4.conv.4.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.tpm.layer4.conv.4.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.tpm.layer5.conv.0.c.weight - torch.Size([192, 64, 1, 1]): 
Initialized by user-defined `init_weights` in Topformer  

backbone.tpm.layer5.conv.0.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.tpm.layer5.conv.0.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.tpm.layer5.conv.2.c.weight - torch.Size([192, 1, 5, 5]): 
Initialized by user-defined `init_weights` in Topformer  

backbone.tpm.layer5.conv.2.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.tpm.layer5.conv.2.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.tpm.layer5.conv.4.c.weight - torch.Size([64, 192, 1, 1]): 
Initialized by user-defined `init_weights` in Topformer  

backbone.tpm.layer5.conv.4.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.tpm.layer5.conv.4.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.tpm.layer6.conv.0.c.weight - torch.Size([192, 64, 1, 1]): 
Initialized by user-defined `init_weights` in Topformer  

backbone.tpm.layer6.conv.0.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.tpm.layer6.conv.0.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.tpm.layer6.conv.2.c.weight - torch.Size([192, 1, 3, 3]): 
Initialized by user-defined `init_weights` in Topformer  

backbone.tpm.layer6.conv.2.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.tpm.layer6.conv.2.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.tpm.layer6.conv.4.c.weight - torch.Size([128, 192, 1, 1]): 
Initialized by user-defined `init_weights` in Topformer  

backbone.tpm.layer6.conv.4.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.tpm.layer6.conv.4.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.tpm.layer7.conv.0.c.weight - torch.Size([384, 128, 1, 1]): 
Initialized by user-defined `init_weights` in Topformer  

backbone.tpm.layer7.conv.0.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.tpm.layer7.conv.0.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.tpm.layer7.conv.2.c.weight - torch.Size([384, 1, 3, 3]): 
Initialized by user-defined `init_weights` in Topformer  

backbone.tpm.layer7.conv.2.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.tpm.layer7.conv.2.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.tpm.layer7.conv.4.c.weight - torch.Size([128, 384, 1, 1]): 
Initialized by user-defined `init_weights` in Topformer  

backbone.tpm.layer7.conv.4.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.tpm.layer7.conv.4.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.tpm.layer8.conv.0.c.weight - torch.Size([768, 128, 1, 1]): 
Initialized by user-defined `init_weights` in Topformer  

backbone.tpm.layer8.conv.0.bn.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.tpm.layer8.conv.0.bn.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.tpm.layer8.conv.2.c.weight - torch.Size([768, 1, 5, 5]): 
Initialized by user-defined `init_weights` in Topformer  

backbone.tpm.layer8.conv.2.bn.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.tpm.layer8.conv.2.bn.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.tpm.layer8.conv.4.c.weight - torch.Size([160, 768, 1, 1]): 
Initialized by user-defined `init_weights` in Topformer  

backbone.tpm.layer8.conv.4.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.tpm.layer8.conv.4.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.tpm.layer9.conv.0.c.weight - torch.Size([960, 160, 1, 1]): 
Initialized by user-defined `init_weights` in Topformer  

backbone.tpm.layer9.conv.0.bn.weight - torch.Size([960]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.tpm.layer9.conv.0.bn.bias - torch.Size([960]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.tpm.layer9.conv.2.c.weight - torch.Size([960, 1, 5, 5]): 
Initialized by user-defined `init_weights` in Topformer  

backbone.tpm.layer9.conv.2.bn.weight - torch.Size([960]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.tpm.layer9.conv.2.bn.bias - torch.Size([960]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.tpm.layer9.conv.4.c.weight - torch.Size([160, 960, 1, 1]): 
Initialized by user-defined `init_weights` in Topformer  

backbone.tpm.layer9.conv.4.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.tpm.layer9.conv.4.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.tpm.layer10.conv.0.c.weight - torch.Size([960, 160, 1, 1]): 
Initialized by user-defined `init_weights` in Topformer  

backbone.tpm.layer10.conv.0.bn.weight - torch.Size([960]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.tpm.layer10.conv.0.bn.bias - torch.Size([960]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.tpm.layer10.conv.2.c.weight - torch.Size([960, 1, 3, 3]): 
Initialized by user-defined `init_weights` in Topformer  

backbone.tpm.layer10.conv.2.bn.weight - torch.Size([960]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.tpm.layer10.conv.2.bn.bias - torch.Size([960]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.tpm.layer10.conv.4.c.weight - torch.Size([160, 960, 1, 1]): 
Initialized by user-defined `init_weights` in Topformer  

backbone.tpm.layer10.conv.4.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.tpm.layer10.conv.4.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.trans.transformer_blocks.0.attn.to_q.c.weight - torch.Size([128, 384, 1, 1]): 
Initialized by user-defined `init_weights` in Topformer  

backbone.trans.transformer_blocks.0.attn.to_q.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.trans.transformer_blocks.0.attn.to_q.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.trans.transformer_blocks.0.attn.to_k.c.weight - torch.Size([128, 384, 1, 1]): 
Initialized by user-defined `init_weights` in Topformer  

backbone.trans.transformer_blocks.0.attn.to_k.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.trans.transformer_blocks.0.attn.to_k.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.trans.transformer_blocks.0.attn.to_v.c.weight - torch.Size([256, 384, 1, 1]): 
Initialized by user-defined `init_weights` in Topformer  

backbone.trans.transformer_blocks.0.attn.to_v.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.trans.transformer_blocks.0.attn.to_v.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.trans.transformer_blocks.0.attn.proj.1.c.weight - torch.Size([384, 256, 1, 1]): 
Initialized by user-defined `init_weights` in Topformer  

backbone.trans.transformer_blocks.0.attn.proj.1.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.trans.transformer_blocks.0.attn.proj.1.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.trans.transformer_blocks.0.mlp.fc1.c.weight - torch.Size([768, 384, 1, 1]): 
Initialized by user-defined `init_weights` in Topformer  

backbone.trans.transformer_blocks.0.mlp.fc1.bn.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.trans.transformer_blocks.0.mlp.fc1.bn.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.trans.transformer_blocks.0.mlp.dwconv.weight - torch.Size([768, 1, 3, 3]): 
Initialized by user-defined `init_weights` in Topformer  

backbone.trans.transformer_blocks.0.mlp.dwconv.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in Topformer  

backbone.trans.transformer_blocks.0.mlp.fc2.c.weight - torch.Size([384, 768, 1, 1]): 
Initialized by user-defined `init_weights` in Topformer  

backbone.trans.transformer_blocks.0.mlp.fc2.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.trans.transformer_blocks.0.mlp.fc2.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.trans.transformer_blocks.1.attn.to_q.c.weight - torch.Size([128, 384, 1, 1]): 
Initialized by user-defined `init_weights` in Topformer  

backbone.trans.transformer_blocks.1.attn.to_q.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.trans.transformer_blocks.1.attn.to_q.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.trans.transformer_blocks.1.attn.to_k.c.weight - torch.Size([128, 384, 1, 1]): 
Initialized by user-defined `init_weights` in Topformer  

backbone.trans.transformer_blocks.1.attn.to_k.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.trans.transformer_blocks.1.attn.to_k.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.trans.transformer_blocks.1.attn.to_v.c.weight - torch.Size([256, 384, 1, 1]): 
Initialized by user-defined `init_weights` in Topformer  

backbone.trans.transformer_blocks.1.attn.to_v.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.trans.transformer_blocks.1.attn.to_v.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.trans.transformer_blocks.1.attn.proj.1.c.weight - torch.Size([384, 256, 1, 1]): 
Initialized by user-defined `init_weights` in Topformer  

backbone.trans.transformer_blocks.1.attn.proj.1.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.trans.transformer_blocks.1.attn.proj.1.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.trans.transformer_blocks.1.mlp.fc1.c.weight - torch.Size([768, 384, 1, 1]): 
Initialized by user-defined `init_weights` in Topformer  

backbone.trans.transformer_blocks.1.mlp.fc1.bn.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.trans.transformer_blocks.1.mlp.fc1.bn.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.trans.transformer_blocks.1.mlp.dwconv.weight - torch.Size([768, 1, 3, 3]): 
Initialized by user-defined `init_weights` in Topformer  

backbone.trans.transformer_blocks.1.mlp.dwconv.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in Topformer  

backbone.trans.transformer_blocks.1.mlp.fc2.c.weight - torch.Size([384, 768, 1, 1]): 
Initialized by user-defined `init_weights` in Topformer  

backbone.trans.transformer_blocks.1.mlp.fc2.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.trans.transformer_blocks.1.mlp.fc2.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.trans.transformer_blocks.2.attn.to_q.c.weight - torch.Size([128, 384, 1, 1]): 
Initialized by user-defined `init_weights` in Topformer  

backbone.trans.transformer_blocks.2.attn.to_q.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.trans.transformer_blocks.2.attn.to_q.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.trans.transformer_blocks.2.attn.to_k.c.weight - torch.Size([128, 384, 1, 1]): 
Initialized by user-defined `init_weights` in Topformer  

backbone.trans.transformer_blocks.2.attn.to_k.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.trans.transformer_blocks.2.attn.to_k.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.trans.transformer_blocks.2.attn.to_v.c.weight - torch.Size([256, 384, 1, 1]): 
Initialized by user-defined `init_weights` in Topformer  

backbone.trans.transformer_blocks.2.attn.to_v.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.trans.transformer_blocks.2.attn.to_v.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.trans.transformer_blocks.2.attn.proj.1.c.weight - torch.Size([384, 256, 1, 1]): 
Initialized by user-defined `init_weights` in Topformer  

backbone.trans.transformer_blocks.2.attn.proj.1.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.trans.transformer_blocks.2.attn.proj.1.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.trans.transformer_blocks.2.mlp.fc1.c.weight - torch.Size([768, 384, 1, 1]): 
Initialized by user-defined `init_weights` in Topformer  

backbone.trans.transformer_blocks.2.mlp.fc1.bn.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.trans.transformer_blocks.2.mlp.fc1.bn.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.trans.transformer_blocks.2.mlp.dwconv.weight - torch.Size([768, 1, 3, 3]): 
Initialized by user-defined `init_weights` in Topformer  

backbone.trans.transformer_blocks.2.mlp.dwconv.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in Topformer  

backbone.trans.transformer_blocks.2.mlp.fc2.c.weight - torch.Size([384, 768, 1, 1]): 
Initialized by user-defined `init_weights` in Topformer  

backbone.trans.transformer_blocks.2.mlp.fc2.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.trans.transformer_blocks.2.mlp.fc2.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.trans.transformer_blocks.3.attn.to_q.c.weight - torch.Size([128, 384, 1, 1]): 
Initialized by user-defined `init_weights` in Topformer  

backbone.trans.transformer_blocks.3.attn.to_q.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.trans.transformer_blocks.3.attn.to_q.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.trans.transformer_blocks.3.attn.to_k.c.weight - torch.Size([128, 384, 1, 1]): 
Initialized by user-defined `init_weights` in Topformer  

backbone.trans.transformer_blocks.3.attn.to_k.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.trans.transformer_blocks.3.attn.to_k.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.trans.transformer_blocks.3.attn.to_v.c.weight - torch.Size([256, 384, 1, 1]): 
Initialized by user-defined `init_weights` in Topformer  

backbone.trans.transformer_blocks.3.attn.to_v.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.trans.transformer_blocks.3.attn.to_v.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.trans.transformer_blocks.3.attn.proj.1.c.weight - torch.Size([384, 256, 1, 1]): 
Initialized by user-defined `init_weights` in Topformer  

backbone.trans.transformer_blocks.3.attn.proj.1.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.trans.transformer_blocks.3.attn.proj.1.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.trans.transformer_blocks.3.mlp.fc1.c.weight - torch.Size([768, 384, 1, 1]): 
Initialized by user-defined `init_weights` in Topformer  

backbone.trans.transformer_blocks.3.mlp.fc1.bn.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.trans.transformer_blocks.3.mlp.fc1.bn.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.trans.transformer_blocks.3.mlp.dwconv.weight - torch.Size([768, 1, 3, 3]): 
Initialized by user-defined `init_weights` in Topformer  

backbone.trans.transformer_blocks.3.mlp.dwconv.bias - torch.Size([768]): 
Initialized by user-defined `init_weights` in Topformer  

backbone.trans.transformer_blocks.3.mlp.fc2.c.weight - torch.Size([384, 768, 1, 1]): 
Initialized by user-defined `init_weights` in Topformer  

backbone.trans.transformer_blocks.3.mlp.fc2.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.trans.transformer_blocks.3.mlp.fc2.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.SIM.1.local_embedding.conv.weight - torch.Size([256, 64, 1, 1]): 
Initialized by user-defined `init_weights` in Topformer  

backbone.SIM.1.local_embedding.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.SIM.1.local_embedding.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.SIM.1.global_embedding.conv.weight - torch.Size([256, 64, 1, 1]): 
Initialized by user-defined `init_weights` in Topformer  

backbone.SIM.1.global_embedding.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.SIM.1.global_embedding.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.SIM.1.global_act.conv.weight - torch.Size([256, 64, 1, 1]): 
Initialized by user-defined `init_weights` in Topformer  

backbone.SIM.1.global_act.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.SIM.1.global_act.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.SIM.2.local_embedding.conv.weight - torch.Size([256, 128, 1, 1]): 
Initialized by user-defined `init_weights` in Topformer  

backbone.SIM.2.local_embedding.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.SIM.2.local_embedding.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.SIM.2.global_embedding.conv.weight - torch.Size([256, 128, 1, 1]): 
Initialized by user-defined `init_weights` in Topformer  

backbone.SIM.2.global_embedding.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.SIM.2.global_embedding.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.SIM.2.global_act.conv.weight - torch.Size([256, 128, 1, 1]): 
Initialized by user-defined `init_weights` in Topformer  

backbone.SIM.2.global_act.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.SIM.2.global_act.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.SIM.3.local_embedding.conv.weight - torch.Size([256, 160, 1, 1]): 
Initialized by user-defined `init_weights` in Topformer  

backbone.SIM.3.local_embedding.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.SIM.3.local_embedding.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.SIM.3.global_embedding.conv.weight - torch.Size([256, 160, 1, 1]): 
Initialized by user-defined `init_weights` in Topformer  

backbone.SIM.3.global_embedding.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.SIM.3.global_embedding.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.SIM.3.global_act.conv.weight - torch.Size([256, 160, 1, 1]): 
Initialized by user-defined `init_weights` in Topformer  

backbone.SIM.3.global_act.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.SIM.3.global_act.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.conv_seg.weight - torch.Size([150, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

decode_head.conv_seg.bias - torch.Size([150]): 
NormalInit: mean=0, std=0.01, bias=0 

decode_head.linear_fuse.conv.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

decode_head.linear_fuse.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.linear_fuse.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  
2022-10-31 21:14:36,507 - mmseg - INFO - EncoderDecoder(
  (backbone): Topformer(
    (tpm): TokenPyramidModule(
      (stem): Sequential(
        (0): Conv2d_BN(
          (c): Conv2d(3, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (bn): _BatchNormXd(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (1): ReLU()
      )
      (layer1): InvertedResidual(
        (conv): Sequential(
          (0): Conv2d_BN(
            (c): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
            (bn): _BatchNormXd(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (1): ReLU()
          (2): Conv2d_BN(
            (c): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn): _BatchNormXd(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
      (layer2): InvertedResidual(
        (conv): Sequential(
          (0): Conv2d_BN(
            (c): Conv2d(16, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn): _BatchNormXd(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (1): ReLU()
          (2): Conv2d_BN(
            (c): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=64, bias=False)
            (bn): _BatchNormXd(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (3): ReLU()
          (4): Conv2d_BN(
            (c): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn): _BatchNormXd(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
      (layer3): InvertedResidual(
        (conv): Sequential(
          (0): Conv2d_BN(
            (c): Conv2d(32, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn): _BatchNormXd(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (1): ReLU()
          (2): Conv2d_BN(
            (c): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=96, bias=False)
            (bn): _BatchNormXd(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (3): ReLU()
          (4): Conv2d_BN(
            (c): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn): _BatchNormXd(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
      (layer4): InvertedResidual(
        (conv): Sequential(
          (0): Conv2d_BN(
            (c): Conv2d(32, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn): _BatchNormXd(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (1): ReLU()
          (2): Conv2d_BN(
            (c): Conv2d(96, 96, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=96, bias=False)
            (bn): _BatchNormXd(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (3): ReLU()
          (4): Conv2d_BN(
            (c): Conv2d(96, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn): _BatchNormXd(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
      (layer5): InvertedResidual(
        (conv): Sequential(
          (0): Conv2d_BN(
            (c): Conv2d(64, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn): _BatchNormXd(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (1): ReLU()
          (2): Conv2d_BN(
            (c): Conv2d(192, 192, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=192, bias=False)
            (bn): _BatchNormXd(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (3): ReLU()
          (4): Conv2d_BN(
            (c): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn): _BatchNormXd(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
      (layer6): InvertedResidual(
        (conv): Sequential(
          (0): Conv2d_BN(
            (c): Conv2d(64, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn): _BatchNormXd(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (1): ReLU()
          (2): Conv2d_BN(
            (c): Conv2d(192, 192, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=192, bias=False)
            (bn): _BatchNormXd(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (3): ReLU()
          (4): Conv2d_BN(
            (c): Conv2d(192, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn): _BatchNormXd(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
      (layer7): InvertedResidual(
        (conv): Sequential(
          (0): Conv2d_BN(
            (c): Conv2d(128, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn): _BatchNormXd(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (1): ReLU()
          (2): Conv2d_BN(
            (c): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
            (bn): _BatchNormXd(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (3): ReLU()
          (4): Conv2d_BN(
            (c): Conv2d(384, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn): _BatchNormXd(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
      (layer8): InvertedResidual(
        (conv): Sequential(
          (0): Conv2d_BN(
            (c): Conv2d(128, 768, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn): _BatchNormXd(768, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (1): ReLU()
          (2): Conv2d_BN(
            (c): Conv2d(768, 768, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=768, bias=False)
            (bn): _BatchNormXd(768, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (3): ReLU()
          (4): Conv2d_BN(
            (c): Conv2d(768, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn): _BatchNormXd(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
      (layer9): InvertedResidual(
        (conv): Sequential(
          (0): Conv2d_BN(
            (c): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn): _BatchNormXd(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (1): ReLU()
          (2): Conv2d_BN(
            (c): Conv2d(960, 960, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=960, bias=False)
            (bn): _BatchNormXd(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (3): ReLU()
          (4): Conv2d_BN(
            (c): Conv2d(960, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn): _BatchNormXd(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
      (layer10): InvertedResidual(
        (conv): Sequential(
          (0): Conv2d_BN(
            (c): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn): _BatchNormXd(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (1): ReLU()
          (2): Conv2d_BN(
            (c): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
            (bn): _BatchNormXd(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (3): ReLU()
          (4): Conv2d_BN(
            (c): Conv2d(960, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn): _BatchNormXd(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
    )
    (ppa): PyramidPoolAgg()
    (trans): BasicLayer(
      (transformer_blocks): ModuleList(
        (0): Block(
          (attn): Attention(
            (to_q): Conv2d_BN(
              (c): Conv2d(384, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn): _BatchNormXd(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (to_k): Conv2d_BN(
              (c): Conv2d(384, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn): _BatchNormXd(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (to_v): Conv2d_BN(
              (c): Conv2d(384, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (proj): Sequential(
              (0): ReLU6()
              (1): Conv2d_BN(
                (c): Conv2d(256, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn): _BatchNormXd(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
          )
          (drop_path): Identity()
          (mlp): Mlp(
            (fc1): Conv2d_BN(
              (c): Conv2d(384, 768, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn): _BatchNormXd(768, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (dwconv): Conv2d(768, 768, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=768)
            (act): ReLU6()
            (fc2): Conv2d_BN(
              (c): Conv2d(768, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn): _BatchNormXd(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (drop): Dropout(p=0, inplace=False)
          )
        )
        (1): Block(
          (attn): Attention(
            (to_q): Conv2d_BN(
              (c): Conv2d(384, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn): _BatchNormXd(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (to_k): Conv2d_BN(
              (c): Conv2d(384, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn): _BatchNormXd(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (to_v): Conv2d_BN(
              (c): Conv2d(384, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (proj): Sequential(
              (0): ReLU6()
              (1): Conv2d_BN(
                (c): Conv2d(256, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn): _BatchNormXd(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
          )
          (drop_path): DropPath()
          (mlp): Mlp(
            (fc1): Conv2d_BN(
              (c): Conv2d(384, 768, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn): _BatchNormXd(768, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (dwconv): Conv2d(768, 768, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=768)
            (act): ReLU6()
            (fc2): Conv2d_BN(
              (c): Conv2d(768, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn): _BatchNormXd(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (drop): Dropout(p=0, inplace=False)
          )
        )
        (2): Block(
          (attn): Attention(
            (to_q): Conv2d_BN(
              (c): Conv2d(384, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn): _BatchNormXd(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (to_k): Conv2d_BN(
              (c): Conv2d(384, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn): _BatchNormXd(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (to_v): Conv2d_BN(
              (c): Conv2d(384, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (proj): Sequential(
              (0): ReLU6()
              (1): Conv2d_BN(
                (c): Conv2d(256, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn): _BatchNormXd(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
          )
          (drop_path): DropPath()
          (mlp): Mlp(
            (fc1): Conv2d_BN(
              (c): Conv2d(384, 768, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn): _BatchNormXd(768, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (dwconv): Conv2d(768, 768, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=768)
            (act): ReLU6()
            (fc2): Conv2d_BN(
              (c): Conv2d(768, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn): _BatchNormXd(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (drop): Dropout(p=0, inplace=False)
          )
        )
        (3): Block(
          (attn): Attention(
            (to_q): Conv2d_BN(
              (c): Conv2d(384, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn): _BatchNormXd(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (to_k): Conv2d_BN(
              (c): Conv2d(384, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn): _BatchNormXd(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (to_v): Conv2d_BN(
              (c): Conv2d(384, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (proj): Sequential(
              (0): ReLU6()
              (1): Conv2d_BN(
                (c): Conv2d(256, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (bn): _BatchNormXd(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
          )
          (drop_path): DropPath()
          (mlp): Mlp(
            (fc1): Conv2d_BN(
              (c): Conv2d(384, 768, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn): _BatchNormXd(768, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (dwconv): Conv2d(768, 768, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=768)
            (act): ReLU6()
            (fc2): Conv2d_BN(
              (c): Conv2d(768, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn): _BatchNormXd(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (drop): Dropout(p=0, inplace=False)
          )
        )
      )
    )
    (SIM): ModuleList(
      (0): Identity()
      (1): InjectionMultiSum(
        (local_embedding): ConvModule(
          (conv): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (global_embedding): ConvModule(
          (conv): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (global_act): ConvModule(
          (conv): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (act): h_sigmoid(
          (relu): ReLU6(inplace=True)
        )
      )
      (2): InjectionMultiSum(
        (local_embedding): ConvModule(
          (conv): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (global_embedding): ConvModule(
          (conv): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (global_act): ConvModule(
          (conv): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (act): h_sigmoid(
          (relu): ReLU6(inplace=True)
        )
      )
      (3): InjectionMultiSum(
        (local_embedding): ConvModule(
          (conv): Conv2d(160, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (global_embedding): ConvModule(
          (conv): Conv2d(160, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (global_act): ConvModule(
          (conv): Conv2d(160, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (act): h_sigmoid(
          (relu): ReLU6(inplace=True)
        )
      )
    )
  )
  init_cfg={'type': 'Pretrained', 'checkpoint': None}
  (decode_head): SimpleHead(
    input_transform=multiple_select, ignore_index=255, align_corners=False
    (loss_decode): CrossEntropyLoss()
    (conv_seg): Conv2d(256, 150, kernel_size=(1, 1), stride=(1, 1))
    (dropout): Dropout2d(p=0.1, inplace=False)
    (linear_fuse): ConvModule(
      (conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (activate): ReLU(inplace=True)
    )
  )
  init_cfg={'type': 'Normal', 'std': 0.01, 'override': {'name': 'conv_seg'}}
)
